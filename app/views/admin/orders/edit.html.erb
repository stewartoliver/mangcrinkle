<% content_for :title, "Edit Order ##{@order.id}" %>

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-orange-950">Edit Order #<%= @order.id %></h1>
    <p class="mt-2 text-orange-600">Update order information, status, and items.</p>
  </div>

  <% if flash[:alert] %>
    <div class="mb-6 bg-red-50 border border-red-200 rounded-md p-4">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800">Order Update Failed</h3>
          <div class="mt-2 text-sm text-red-700">
            <p><%= flash[:alert] %></p>
          </div>
        </div>
      </div>
    </div>
  <% end %>

  <% if @order&.errors&.any? %>
    <div class="mb-6 bg-red-50 border border-red-200 rounded-md p-4">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800">Validation Errors</h3>
          <div class="mt-2 text-sm text-red-700">
            <ul class="list-disc pl-5 space-y-1">
              <% @order.errors.full_messages.each do |message| %>
                <li><%= message %></li>
              <% end %>
            </ul>
          </div>
        </div>
      </div>
    </div>
  <% end %>

  <%= form_with model: [:admin, @order], local: true, class: "space-y-8", data: { turbo: false } do |form| %>
    <!-- Order Status -->
    <div class="bg-white shadow rounded-lg border border-orange-200 p-6">
      <h3 class="text-lg font-medium text-orange-950 mb-4">Order Status</h3>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <%= form.label :status, "Status", class: "form-label" %>
          <div class="mt-1">
            <%= form.select :status, 
                options_for_select([
                  ['Pending', 'pending'],
                  ['Processing', 'processing'],
                  ['Completed', 'completed'],
                  ['Cancelled', 'cancelled']
                ], @order.status),
                {},
                class: "form-select" %>
          </div>
        </div>

        <div>
          <%= form.label :shipping_carrier, "Shipping Carrier", class: "form-label" %>
          <div class="mt-1">
            <%= form.select :shipping_carrier, 
                options_for_select([
                  ['', ''],
                  ['USPS', 'usps'],
                  ['UPS', 'ups'],
                  ['FedEx', 'fedex'],
                  ['DHL', 'dhl'],
                  ['Local Delivery', 'local']
                ], @order.shipping_carrier),
                {},
                class: "form-select" %>
          </div>
        </div>

        <div>
          <%= form.label :tracking_number, "Tracking Number", class: "form-label" %>
          <div class="mt-1">
            <%= form.text_field :tracking_number, class: "form-input" %>
          </div>
        </div>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
        <div>
          <%= form.label :estimated_delivery, "Estimated Delivery", class: "form-label" %>
          <div class="mt-1">
            <%= form.date_field :estimated_delivery, class: "form-date" %>
          </div>
        </div>

        <div>
          <%= form.label :shipped_at, "Shipped Date", class: "form-label" %>
          <div class="mt-1">
            <%= form.datetime_local_field :shipped_at, class: "form-input" %>
          </div>
        </div>
      </div>
    </div>

    <!-- Customer Information -->
    <div class="bg-white shadow rounded-lg border border-orange-200 p-6">
      <h3 class="text-lg font-medium text-orange-950 mb-4">Customer Information</h3>
      
      <!-- Customer Details Form -->
      <div id="customer-details-form">
        <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
          <div class="sm:col-span-3">
            <%= form.label :customer_name, "Customer Name", class: "form-label" %>
            <div class="mt-1">
              <%= form.text_field :customer_name, class: "form-input" %>
              <% if @order&.errors[:customer_name]&.any? %>
                <p class="form-error"><%= @order.errors[:customer_name].first %></p>
              <% end %>
            </div>
          </div>

          <div class="sm:col-span-3">
            <%= form.label :email, "Email", class: "form-label" %>
            <div class="mt-1">
              <%= form.email_field :email, class: "form-input" %>
              <% if @order&.errors[:email]&.any? %>
                <p class="form-error"><%= @order.errors[:email].first %></p>
              <% end %>
            </div>
          </div>

          <div class="sm:col-span-3">
            <%= form.label :phone, "Phone", class: "form-label" %>
            <div class="mt-1">
              <%= form.telephone_field :phone, class: "form-input" %>
              <% if @order&.errors[:phone]&.any? %>
                <p class="form-error"><%= @order.errors[:phone].first %></p>
              <% end %>
            </div>
          </div>

          <div class="sm:col-span-6">
            <%= form.label :address, "Address", class: "form-label" %>
            <div class="mt-1">
              <%= form.text_area :address, rows: 3, class: "form-textarea" %>
              <% if @order&.errors[:address]&.any? %>
                <p class="form-error"><%= @order.errors[:address].first %></p>
              <% end %>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Add Items Section (Hidden by default) -->
    <div id="add-items-section" class="bg-white shadow rounded-lg border border-orange-200 p-6 hidden">
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-lg font-medium text-orange-950">Add Items to Order</h3>
        <button type="button" id="hide-items-btn" class="text-orange-600 hover:text-orange-800">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <!-- Package Options -->
      <div class="mb-8">
        <h4 class="text-xl font-semibold text-orange-950 mb-4">Package Options</h4>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <% @crinkle_packages.each do |package| %>
            <div class="bg-white rounded-lg shadow-md overflow-hidden border border-orange-200 hover:border-orange-500 transition duration-150">
              <div class="p-6">
                <h5 class="text-lg font-semibold mb-2 text-orange-950"><%= package.name %></h5>
                <p class="text-orange-700 mb-4 text-sm"><%= package.description %></p>
                <div class="space-y-3">
                  <div class="text-center">
                    <span class="text-2xl font-bold text-orange-950">$<%= number_with_precision(package.price, precision: 2) %></span>
                  </div>
                  <button type="button" 
                          data-package-modal-package-id-param="<%= package.id %>"
                          data-package-modal-package-limit-param="<%= package.quantity %>"
                          data-package-modal-products-param='<%= raw Product.active.map { |p| { id: p.id, name: p.name, image_url: p.images.attached? ? rails_blob_url(p.primary_image) : nil } }.to_json %>'
                          class="package-select-btn w-full inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition-colors">
                    Select Package
                  </button>
                </div>
              </div>
            </div>
          <% end %>
        </div>
      </div>

      <!-- Individual Products -->
      <div class="mb-6">
        <h4 class="text-xl font-semibold text-orange-950 mb-4">Individual Products</h4>
        
        <!-- Crinkles Section -->
        <% crinkles = @products.crinkles %>
        <% if crinkles.any? %>
          <div class="mb-8">
            <h5 class="text-lg font-medium text-orange-950 mb-4">Crinkles</h5>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <% crinkles.each do |product| %>
                <div class="bg-white rounded-lg shadow-md overflow-hidden border border-orange-200 hover:border-orange-500 transition duration-150">
                  <div class="p-4 flex items-center space-x-4">
                    <div class="h-16 w-20 bg-orange-50 flex items-center justify-center overflow-hidden rounded-lg flex-shrink-0">
                      <% if product.has_image? %>
                        <%= image_tag product.image, class: "w-full h-full object-cover" %>
                      <% else %>
                        <%= image_tag product.fallback_image_path, class: "w-full h-full object-cover" %>
                      <% end %>
                    </div>
                    
                    <div class="flex-1 min-w-0">
                      <h6 class="text-lg font-semibold text-orange-950 truncate mb-2"><%= product.name %></h6>
                      <div class="flex justify-between items-center">
                        <span class="text-lg font-bold text-orange-950">$<%= number_with_precision(product.price, precision: 2) %></span>
                        <div class="flex items-center gap-2">
                          <label class="text-sm text-orange-700 whitespace-nowrap">Qty:</label>
                          <input type="number" min="0" value="0" 
                                 data-product-id="<%= product.id %>"
                                 data-product-price="<%= product.price %>"
                                 class="product-quantity w-16 px-2 py-1 border border-orange-300 rounded text-sm">
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              <% end %>
            </div>
          </div>
        <% end %>

        <!-- Extras Section -->
        <% extras = @products.extras %>
        <% if extras.any? %>
          <div class="mb-8">
            <h5 class="text-lg font-medium text-green-950 mb-4">Extras</h5>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <% extras.each do |product| %>
                <div class="bg-white rounded-lg shadow-md overflow-hidden border border-green-200 hover:border-green-500 transition duration-150">
                  <div class="p-4 flex items-center space-x-4">
                    <div class="h-16 w-20 bg-green-50 flex items-center justify-center overflow-hidden rounded-lg flex-shrink-0">
                      <% if product.has_image? %>
                        <%= image_tag product.image, class: "w-full h-full object-cover" %>
                      <% else %>
                        <%= image_tag product.fallback_image_path, class: "w-full h-full object-cover" %>
                      <% end %>
                    </div>
                    
                    <div class="flex-1 min-w-0">
                      <h6 class="text-lg font-semibold text-green-950 truncate mb-2"><%= product.name %></h6>
                      <div class="flex justify-between items-center">
                        <span class="text-lg font-bold text-green-950">$<%= number_with_precision(product.price, precision: 2) %></span>
                        <div class="flex items-center gap-2">
                          <label class="text-sm text-green-700 whitespace-nowrap">Qty:</label>
                          <input type="number" min="0" value="0" 
                                 data-product-id="<%= product.id %>"
                                 data-product-price="<%= product.price %>"
                                 class="product-quantity w-16 px-2 py-1 border border-green-300 rounded text-sm">
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              <% end %>
            </div>
          </div>
        <% end %>

        <!-- Merch Section -->
        <% merch = @products.merch %>
        <% if merch.any? %>
          <div class="mb-8">
            <h5 class="text-lg font-medium text-blue-950 mb-4">Merchandise</h5>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <% merch.each do |product| %>
                <div class="bg-white rounded-lg shadow-md overflow-hidden border border-blue-200 hover:border-blue-500 transition duration-150">
                  <div class="p-4 flex items-center space-x-4">
                    <div class="h-16 w-20 bg-blue-50 flex items-center justify-center overflow-hidden rounded-lg flex-shrink-0">
                      <% if product.has_image? %>
                        <%= image_tag product.image, class: "w-full h-full object-cover" %>
                      <% else %>
                        <%= image_tag product.fallback_image_path, class: "w-full h-full object-cover" %>
                      <% end %>
                    </div>
                    
                    <div class="flex-1 min-w-0">
                      <h6 class="text-lg font-semibold text-blue-950 truncate mb-2"><%= product.name %></h6>
                      <div class="flex justify-between items-center">
                        <span class="text-lg font-bold text-blue-950">$<%= number_with_precision(product.price, precision: 2) %></span>
                        <div class="flex items-center gap-2">
                          <label class="text-sm text-blue-700 whitespace-nowrap">Qty:</label>
                          <input type="number" min="0" value="0" 
                                 data-product-id="<%= product.id %>"
                                 data-product-price="<%= product.price %>"
                                 class="product-quantity w-16 px-2 py-1 border border-blue-300 rounded text-sm">
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              <% end %>
            </div>
          </div>
        <% end %>
      </div>

      <!-- Order Summary -->
      <div class="border-t border-orange-200 pt-4">
        <!-- Selected Items Display -->
        <div id="selected-items-display" class="mb-6 hidden">
          <h5 class="text-lg font-medium text-orange-950 mb-3">New Items to Add</h5>
          <div id="selected-items-list" class="space-y-2">
            <!-- Selected items will be displayed here -->
          </div>
        </div>
        
        <div class="flex justify-between items-center">
          <h4 class="text-xl font-semibold text-orange-950">New Items Total</h4>
          <span id="new-items-total" class="text-3xl font-bold text-orange-950">$0.00</span>
        </div>
      </div>
    </div>

    <!-- Current Order Items -->
    <div class="bg-white shadow rounded-lg border border-orange-200 p-6">
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-lg font-medium text-orange-950">Current Order Items</h3>
        <button type="button" id="add-items-btn" onclick="showAddItemsSection()" class="bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-md text-sm font-medium">
          Add Items
        </button>
      </div>
      
      <% if @order.line_items.any? %>
        <div class="overflow-x-auto">
          <table class="admin-table">
            <thead class="admin-table-header">
              <tr>
                <th scope="col" class="admin-table-header-cell">Item</th>
                <th scope="col" class="admin-table-header-cell-center">Quantity</th>
                <th scope="col" class="admin-table-header-cell-center">Price</th>
                <th scope="col" class="admin-table-header-cell-center">Subtotal</th>
                <th scope="col" class="admin-table-header-cell-center">Actions</th>
              </tr>
            </thead>
            <tbody class="admin-table-body">
              <% @order.line_items.each do |line_item| %>
                <tr class="line-item-card" 
                    data-line-item-id="<%= line_item.id %>"
                    data-line-item-type="<%= line_item.purchasable_type %>"
                    data-line-item-purchasable-id="<%= line_item.purchasable_id %>"
                    data-line-item-quantity="<%= line_item.quantity %>"
                    data-line-item-product-quantities="<%= line_item.product_quantities.to_json if line_item.product_quantities.present? %>">
                  <td class="admin-table-cell">
                    <div class="text-sm font-medium text-orange-950"><%= line_item.name %></div>
                    <% if line_item.description.present? %>
                      <div class="text-sm text-orange-600"><%= line_item.description %></div>
                    <% end %>
                    <% if line_item.purchasable.is_a?(CrinklePackage) && line_item.selected_products.any? %>
                      <div class="mt-2 text-xs text-orange-500">
                        <div class="font-medium mb-1">Selected items:</div>
                        <% line_item.selected_products.each do |selected| %>
                          <div class="ml-2">• <%= selected[:quantity] %>x <%= selected[:product].name %></div>
                        <% end %>
                      </div>
                    <% end %>
                  </td>
                  <td class="admin-table-cell-center text-sm text-orange-600">
                    <%= line_item.quantity %>
                  </td>
                  <td class="admin-table-cell-center text-sm text-orange-600">
                    $<%= number_with_precision(line_item.price, precision: 2) %>
                  </td>
                  <td class="admin-table-cell-center text-sm text-orange-600">
                    $<%= number_with_precision(line_item.total_price, precision: 2) %>
                  </td>
                  <td class="admin-table-cell-center">
                    <button type="button" class="text-red-600 hover:text-red-800 remove-line-item-btn" data-line-item-id="<%= line_item.id %>">
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                    </button>
                  </td>
                </tr>
              <% end %>
            </tbody>
            <tfoot class="bg-orange-50">
              <tr>
                <td colspan="3" class="px-6 py-4 text-right text-sm font-medium text-orange-950">Current Total:</td>
                <td class="px-6 py-4 text-center text-sm font-medium text-orange-950">
                  <span id="current-order-total">$<%= number_with_precision(@order.total_price, precision: 2) %></span>
                </td>
                <td></td>
              </tr>
            </tfoot>
          </table>
        </div>
      <% else %>
        <p class="text-orange-600 text-center py-8">No items in this order.</p>
      <% end %>
    </div>

    <!-- Hidden Fields for Form Submission -->
    <div id="line-items-container">
      <!-- Line items will be added here dynamically -->
    </div>

    <!-- Action Buttons -->
    <div class="flex justify-end space-x-3">
      <%= link_to "Cancel", admin_order_path(@order), class: "bg-gray-300 hover:bg-gray-400 text-gray-800 px-4 py-2 rounded-md text-sm font-medium" %>
      <%= form.submit "Update Order", class: "bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-md text-sm font-medium" %>
    </div>
  <% end %>
</div>

<!-- Package Selection Modal -->
<div id="adminPackageModal" class="fixed inset-0 hidden z-50" aria-labelledby="modal-title" role="dialog" aria-modal="true">
  <!-- Backdrop -->
  <div class="fixed inset-0 backdrop-blur-sm"></div>
  
  <div class="fixed inset-0 z-10 overflow-y-auto">
    <div class="flex min-h-full items-center justify-center p-4">
      <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all w-full max-w-md sm:p-6">
        <div class="absolute right-0 top-0 hidden pr-4 pt-4 sm:block">
          <button type="button" onclick="closeAdminPackageModal()" class="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2">
            <span class="sr-only">Close</span>
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <div class="sm:flex sm:items-start">
          <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
            <h3 class="text-xl font-semibold leading-6 text-orange-950" id="modal-title">Select Package Items</h3>
            <input type="hidden" id="packageId">
            <input type="hidden" id="editingLineItemId">
          </div>
        </div>

        <div id="productSelectionContainer" class="mt-6 space-y-3">
          <!-- Product selection fields will be dynamically added here -->
        </div>

        <div class="mt-6 flex items-center justify-between">
          <div class="text-sm text-orange-700">
            <span>Total: </span>
            <span id="totalItems">0</span>
            <span>/</span>
            <span id="packageLimit">0</span>
          </div>
          <div class="flex space-x-3">
            <button type="button" onclick="closeAdminPackageModal()" class="inline-flex justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-orange-700 shadow-sm ring-1 ring-inset ring-orange-300 hover:bg-orange-50">
              Cancel
            </button>
            <button type="button" onclick="addPackageToOrder()"
                    class="inline-flex justify-center rounded-md bg-orange-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-orange-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-orange-600"
                    id="submitButton">
              Add to Order
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
// Global variables
window.selectedPackages = window.selectedPackages || [];
window.removedLineItemIds = window.removedLineItemIds || [];
window.updatedLineItems = window.updatedLineItems || [];
window.editingLineItemId = window.editingLineItemId || null;

// Global functions that need to be accessible from the modal
window.updateNewItemsTotal = function() {
  let newItemsTotal = 0;
  
  // Calculate products total
  document.querySelectorAll('#add-items-section .product-quantity').forEach(input => {
    const quantity = parseInt(input.value) || 0;
    const price = parseFloat(input.dataset.productPrice);
    newItemsTotal += quantity * price;
  });
  
  // Calculate packages total
  window.selectedPackages.forEach(package => {
    newItemsTotal += package.price * package.quantity;
  });
  
  document.getElementById('new-items-total').textContent = '$' + newItemsTotal.toFixed(2);
  updateSelectedItemsDisplay();
};

// Update selected items display
window.updateSelectedItemsDisplay = function() {
  const displayDiv = document.getElementById('selected-items-display');
  const listDiv = document.getElementById('selected-items-list');
  const hasItems = window.selectedPackages.length > 0 || Array.from(document.querySelectorAll('#add-items-section .product-quantity')).some(input => (parseInt(input.value) || 0) > 0);
  
  if (hasItems) {
    displayDiv.classList.remove('hidden');
    listDiv.innerHTML = '';
    
    // Create table structure
    const table = document.createElement('table');
    table.className = 'admin-table w-full';
    
    // Create table header
    const thead = document.createElement('thead');
    thead.className = 'admin-table-header';
    thead.innerHTML = `
      <tr>
        <th scope="col" class="admin-table-header-cell">Item</th>
        <th scope="col" class="admin-table-header-cell-center">Quantity</th>
        <th scope="col" class="admin-table-header-cell-center">Price</th>
        <th scope="col" class="admin-table-header-cell-center">Subtotal</th>
        <th scope="col" class="admin-table-header-cell-center">Actions</th>
      </tr>
    `;
    table.appendChild(thead);
    
    // Create table body
    const tbody = document.createElement('tbody');
    tbody.className = 'admin-table-body';
    
    // Add selected packages
    window.selectedPackages.forEach((package, index) => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td class="admin-table-cell">
          <div class="text-sm font-medium text-orange-950">${package.name}</div>
          <div class="text-sm text-orange-600">(Package)</div>
          ${package.product_quantities && Object.keys(package.product_quantities).length > 0 ? `
            <div class="mt-2 text-xs text-orange-500">
              <div class="font-medium mb-1">Selected items:</div>
              ${Object.entries(package.product_quantities).map(([productId, quantity]) => {
                if (quantity > 0) {
                  // Find product name from the add items section
                  const productInput = document.querySelector(`#add-items-section .product-quantity[data-product-id="${productId}"]`);
                  const productName = productInput ? productInput.closest('.bg-white').querySelector('h5, h6').textContent.trim() : `Product ${productId}`;
                  return `<div class="ml-2">• ${quantity}x ${productName}</div>`;
                }
                return '';
              }).join('')}
            </div>
          ` : ''}
        </td>
        <td class="admin-table-cell-center text-sm text-orange-600">${package.quantity}</td>
        <td class="admin-table-cell-center text-sm text-orange-600">$${package.price.toFixed(2)}</td>
        <td class="admin-table-cell-center text-sm text-orange-600">$${(package.price * package.quantity).toFixed(2)}</td>
        <td class="admin-table-cell-center">
          <button type="button" onclick="removePackage(${index})" class="text-red-600 hover:text-red-800">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </td>
      `;
      tbody.appendChild(tr);
    });
    
    // Add selected individual products
    document.querySelectorAll('#add-items-section .product-quantity').forEach(input => {
      const quantity = parseInt(input.value) || 0;
      if (quantity > 0) {
        const productCard = input.closest('.bg-white');
        const productName = productCard.querySelector('h5, h6').textContent.trim();
        const productPrice = parseFloat(input.dataset.productPrice);
        
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td class="admin-table-cell">
            <div class="text-sm font-medium text-orange-950">${productName}</div>
            <div class="text-sm text-orange-600">(Individual Product)</div>
          </td>
          <td class="admin-table-cell-center text-sm text-orange-600">${quantity}</td>
          <td class="admin-table-cell-center text-sm text-orange-600">$${productPrice.toFixed(2)}</td>
          <td class="admin-table-cell-center text-sm text-orange-600">$${(productPrice * quantity).toFixed(2)}</td>
          <td class="admin-table-cell-center">
            <button type="button" onclick="removeIndividualProduct('${input.dataset.productId}')" class="text-red-600 hover:text-red-800">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </td>
        `;
        tbody.appendChild(tr);
      }
    });
    
    table.appendChild(tbody);
    listDiv.appendChild(table);
  } else {
    displayDiv.classList.add('hidden');
  }
};

window.addPackageToOrder = function() {
  const container = document.getElementById('productSelectionContainer');
  if (!container) {
    console.error('productSelectionContainer not found');
    return;
  }
  
  // Get all hidden inputs that contain product quantities
  const inputs = container.querySelectorAll('input[type="hidden"][id^="hidden-"]');
  const productQuantities = {};
  let totalQuantity = 0;
  
  inputs.forEach(input => {
    const quantity = parseInt(input.value) || 0;
    if (quantity > 0) {
      const productId = input.id.replace('hidden-', '');
      productQuantities[productId] = quantity;
      totalQuantity += quantity;
    }
  });
  
  if (totalQuantity > 0) {
    // Get the current package ID from the hidden field
    const packageIdElement = document.getElementById('packageId');
    const currentPackageId = packageIdElement ? packageIdElement.value : null;
    
    // Find package details using the current package ID
    const packageButton = document.querySelector(`[data-package-modal-package-id-param="${currentPackageId}"]`);
    if (packageButton) {
      const packageCard = packageButton.closest('.bg-white');
      const packageName = packageCard.querySelector('h5').textContent.trim();
      const priceElement = packageCard.querySelector('.text-2xl.font-bold');
      const packagePrice = parseFloat(priceElement.textContent.replace('$', '').trim());
      
      // Check if we're editing an existing line item
      const editingLineItemId = document.getElementById('editingLineItemId').value;
      
      if (editingLineItemId) {
        // Update existing line item
        updateExistingLineItem(editingLineItemId, packageName, packagePrice, productQuantities);
      } else {
        // Add to selected packages
        window.selectedPackages.push({
          id: currentPackageId,
          name: packageName,
          price: packagePrice,
          quantity: 1,
          product_quantities: productQuantities
        });
      }
      
      // Close modal and update totals
      if (typeof closeAdminPackageModal === 'function') {
        closeAdminPackageModal();
      }
      
      if (typeof window.updateNewItemsTotal === 'function') {
        window.updateNewItemsTotal();
      }
    } else {
      console.error('Could not find package button for ID:', currentPackageId);
    }
  } else {
    alert('Please select at least one item for the package.');
  }
};

window.removePackage = function(index) {
  window.selectedPackages.splice(index, 1);
  if (typeof window.updateNewItemsTotal === 'function') {
    window.updateNewItemsTotal();
  }
};

window.removeIndividualProduct = function(productId) {
  const input = document.querySelector(`#add-items-section .product-quantity[data-product-id="${productId}"]`);
  if (input) {
    input.value = 0;
    if (typeof window.updateNewItemsTotal === 'function') {
      window.updateNewItemsTotal();
    }
  }
};

window.updateExistingLineItem = function(lineItemId, packageName, packagePrice, productQuantities) {
  const lineItemRow = document.querySelector(`tr[data-line-item-id="${lineItemId}"]`);
  if (lineItemRow) {
    // Update the display in the table
    const nameCell = lineItemRow.querySelector('td:first-child');
    const quantityCell = lineItemRow.querySelector('td:nth-child(2)');
    const priceCell = lineItemRow.querySelector('td:nth-child(3)');
    const subtotalCell = lineItemRow.querySelector('td:nth-child(4)');
    
    if (nameCell) {
      nameCell.innerHTML = `
        <div class="text-sm font-medium text-orange-950">${packageName}</div>
        ${productQuantities && Object.keys(productQuantities).length > 0 ? `
          <div class="mt-2 text-xs text-orange-500">
            <div class="font-medium mb-1">Selected items:</div>
            ${Object.entries(productQuantities).map(([id, qty]) => {
              if (qty > 0) {
                // Get product names from the add items section
                const productInput = document.querySelector(`#add-items-section .product-quantity[data-product-id="${id}"]`);
                const productName = productInput ? productInput.closest('.bg-white').querySelector('h5, h6').textContent.trim() : `Product ${id}`;
                return `<div class="ml-2">• ${qty}x ${productName}</div>`;
              }
              return '';
            }).join('')}
          </div>
        ` : ''}
      `;
    }
    
    if (quantityCell) {
      quantityCell.textContent = '1';
    }
    
    if (priceCell) {
      priceCell.textContent = '$' + packagePrice.toFixed(2);
    }
    
    if (subtotalCell) {
      subtotalCell.textContent = '$' + packagePrice.toFixed(2);
    }
    
    // Update the data attributes
    lineItemRow.dataset.lineItemProductQuantities = JSON.stringify(productQuantities);
    
    // Add to updated line items for form submission
    if (!window.updatedLineItems) window.updatedLineItems = [];
    
    // Remove any existing entry for this line item to avoid duplicates
    window.updatedLineItems = window.updatedLineItems.filter(item => item.line_item_id !== lineItemId);
    
    window.updatedLineItems.push({
      line_item_id: lineItemId,
      product_quantities: productQuantities
    });
    
    // Update the current order total
    updateCurrentOrderTotal();
  }
};

window.removeLineItem = function(lineItemId) {
  if (confirm('Are you sure you want to remove this item from the order?')) {
    // Add to removed items list
    window.removedLineItemIds.push(lineItemId);
    
    // Remove from display - find the table row
    const lineItemRow = document.querySelector(`tr[data-line-item-id="${lineItemId}"]`);
    if (lineItemRow) {
      lineItemRow.remove();
    }
    
    // Update current total
    updateCurrentOrderTotal();
  }
};

window.updateCurrentOrderTotal = function() {
  let currentTotal = 0;
  
  // Calculate from remaining visible line items in the table
  document.querySelectorAll('#current-items-list .line-item-card, .admin-table-body .line-item-card').forEach(card => {
    const priceElement = card.querySelector('td:nth-child(4)'); // Subtotal column
    if (priceElement) {
      const price = parseFloat(priceElement.textContent.replace('$', ''));
      currentTotal += price;
    }
  });
  
  // Add new items total
  const newItemsTotalElement = document.getElementById('new-items-total');
  if (newItemsTotalElement) {
    const newItemsTotal = parseFloat(newItemsTotalElement.textContent.replace('$', '')) || 0;
    currentTotal += newItemsTotal;
  }
  
  document.getElementById('current-order-total').textContent = '$' + currentTotal.toFixed(2);
};

window.closeAdminPackageModal = function() {
  document.getElementById('adminPackageModal').classList.add('hidden');
  document.getElementById('editingLineItemId').value = '';
};

// Backup function to show add items section
window.showAddItemsSection = function() {
  console.log('showAddItemsSection called');
  const addItemsSection = document.getElementById('add-items-section');
  const addItemsBtn = document.getElementById('add-items-btn');
  
  console.log('Add items section found:', !!addItemsSection);
  console.log('Add items button found:', !!addItemsBtn);
  
  if (addItemsSection && addItemsBtn) {
    console.log('Current classes on add-items-section:', addItemsSection.classList.toString());
    addItemsSection.classList.remove('hidden');
    console.log('Classes after removing hidden:', addItemsSection.classList.toString());
    addItemsBtn.style.display = 'none';
    console.log('Button hidden, section should now be visible');
  } else {
    console.error('Elements not found - section:', !!addItemsSection, 'button:', !!addItemsBtn);
  }
};

document.addEventListener('DOMContentLoaded', function() {
  // Add event listeners for quantity changes in the add items section
  document.addEventListener('change', function(e) {
    if (e.target.classList.contains('product-quantity') && e.target.closest('#add-items-section')) {
      window.updateNewItemsTotal();
    }
  });
  
  // Show/hide add items section - with proper error handling and event delegation
  document.addEventListener('click', function(e) {
    console.log('Click event detected:', e.target.id, e.target.classList.toString());
    
    // Add Items button
    if (e.target.id === 'add-items-btn') {
      console.log('Add Items button clicked');
      const addItemsSection = document.getElementById('add-items-section');
      console.log('Add items section found:', !!addItemsSection);
      if (addItemsSection) {
        console.log('Current classes on add-items-section:', addItemsSection.classList.toString());
        addItemsSection.classList.remove('hidden');
        console.log('Classes after removing hidden:', addItemsSection.classList.toString());
        e.target.style.display = 'none';
        console.log('Button hidden');
      } else {
        console.error('add-items-section not found!');
      }
    }
    
    // Hide Items button
    if (e.target.id === 'hide-items-btn' || e.target.closest('#hide-items-btn')) {
      console.log('Hide Items button clicked');
      const addItemsSection = document.getElementById('add-items-section');
      const addItemsBtn = document.getElementById('add-items-btn');
      if (addItemsSection && addItemsBtn) {
        addItemsSection.classList.add('hidden');
        addItemsBtn.style.display = 'block';
      }
    }
  });
  
  // Handle line item card clicks for editing
  document.addEventListener('click', function(e) {
    const lineItemCard = e.target.closest('.line-item-card');
    if (lineItemCard && !e.target.classList.contains('remove-line-item-btn')) {
      const lineItemType = lineItemCard.dataset.lineItemType;
      const purchasableId = lineItemCard.dataset.lineItemPurchasableId;
      
      if (lineItemType === 'CrinklePackage') {
        // Open package modal for editing
        openPackageModalForEditing(purchasableId, lineItemCard.dataset.lineItemId, lineItemCard.dataset.lineItemProductQuantities);
      } else if (lineItemType === 'Product') {
        // For individual products, we could add quantity editing here
        alert('Product editing functionality can be added here');
      }
    }
  });
  
  // Handle remove line item button clicks
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('remove-line-item-btn') || e.target.closest('.remove-line-item-btn')) {
      const button = e.target.classList.contains('remove-line-item-btn') ? e.target : e.target.closest('.remove-line-item-btn');
      const lineItemId = button.dataset.lineItemId;
      window.removeLineItem(lineItemId);
    }
  });
  
  // Package selection button clicks
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('package-select-btn')) {
      const packageId = e.target.dataset.packageModalPackageIdParam;
      const packageLimit = e.target.dataset.packageModalPackageLimitParam;
      const products = JSON.parse(e.target.dataset.packageModalProductsParam);
      
      // Use the openAdminPackageModal function from application.js
      if (typeof window.openAdminPackageModal === 'function') {
        window.openAdminPackageModal(packageId, packageLimit, products);
      } else {
        // Fallback - just show an alert if the function isn't available
        alert('Package selection is not available. Please refresh the page.');
      }
    }
  });
  
  // Modal submit button click handler (delegated event listener)
  document.addEventListener('click', function(e) {
    if (
      e.target.id === 'submitButton' &&
      document.getElementById('adminPackageModal') &&
      !document.getElementById('adminPackageModal').classList.contains('hidden')
    ) {
      e.preventDefault();
      window.addPackageToOrder();
    }
  });
  
  // Form submission - add line items
  const form = document.querySelector('form[action*="admin/orders"]');
  
  if (form) {
    form.addEventListener('submit', function(e) {
      // Prevent default submission first
      e.preventDefault();
      
      const lineItemsContainer = document.getElementById('line-items-container');
      
      // Clear existing line items
      lineItemsContainer.innerHTML = '';
      
      let lineItemCount = 0;
      
      // Add hidden fields for removed line items
      window.removedLineItemIds.forEach(lineItemId => {
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = 'removed_line_item_ids[]';
        hiddenInput.value = lineItemId;
        lineItemsContainer.appendChild(hiddenInput);
      });
      
      // Add hidden fields for updated line items
      if (window.updatedLineItems) {
        window.updatedLineItems.forEach((updatedItem, index) => {
          const lineItemIdInput = document.createElement('input');
          lineItemIdInput.type = 'hidden';
          lineItemIdInput.name = 'updated_line_item_ids[]';
          lineItemIdInput.value = updatedItem.line_item_id;
          lineItemsContainer.appendChild(lineItemIdInput);
          
          const productQuantitiesInput = document.createElement('input');
          productQuantitiesInput.type = 'hidden';
          productQuantitiesInput.name = `updated_line_item_quantities_${updatedItem.line_item_id}`;
          productQuantitiesInput.value = JSON.stringify(updatedItem.product_quantities);
          lineItemsContainer.appendChild(productQuantitiesInput);
        });
      }
      
      // Add new product line items
      const productInputs = document.querySelectorAll('#add-items-section .product-quantity');
      
      productInputs.forEach((input, index) => {
        const quantity = parseInt(input.value) || 0;
        
        if (quantity > 0) {
          const productId = input.dataset.productId;
          
          const hiddenInput = document.createElement('input');
          hiddenInput.type = 'hidden';
          hiddenInput.name = 'line_items[][product_id]';
          hiddenInput.value = productId;
          lineItemsContainer.appendChild(hiddenInput);
          
          const quantityInput = document.createElement('input');
          quantityInput.type = 'hidden';
          quantityInput.name = 'line_items[][quantity]';
          quantityInput.value = quantity;
          lineItemsContainer.appendChild(quantityInput);
          
          lineItemCount++;
        }
      });
      
      // Add new package line items
      window.selectedPackages.forEach((package, index) => {
        const packageIdInput = document.createElement('input');
        packageIdInput.type = 'hidden';
        packageIdInput.name = 'line_items[][package_id]';
        packageIdInput.value = package.id;
        lineItemsContainer.appendChild(packageIdInput);
        
        const quantityInput = document.createElement('input');
        quantityInput.type = 'hidden';
        quantityInput.name = 'line_items[][quantity]';
        quantityInput.value = package.quantity;
        lineItemsContainer.appendChild(quantityInput);
        
        const productQuantitiesInput = document.createElement('input');
        productQuantitiesInput.type = 'hidden';
        productQuantitiesInput.name = 'line_items[][product_quantities]';
        productQuantitiesInput.value = JSON.stringify(package.product_quantities);
        lineItemsContainer.appendChild(productQuantitiesInput);
        
        lineItemCount++;
      });
      
      // Submit the form
      this.submit();
    });
  } else {
    console.error('Admin orders form not found!');
  }
});

// Function to open package modal for editing existing packages
function openPackageModalForEditing(packageId, lineItemId, productQuantitiesJson) {
  const productQuantities = productQuantitiesJson ? JSON.parse(productQuantitiesJson) : {};
  
  // Find the package button to get the same data
  const packageButton = document.querySelector(`[data-package-modal-package-id-param="${packageId}"]`);
  if (!packageButton) return;
  
  const packageLimit = packageButton.dataset.packageModalPackageLimitParam;
  const products = JSON.parse(packageButton.dataset.packageModalProductsParam);
  
  document.getElementById('packageId').value = packageId;
  document.getElementById('packageLimit').textContent = packageLimit;
  document.getElementById('editingLineItemId').value = lineItemId;
  
  // Use the same interface as the new page
  if (typeof window.openAdminPackageModal === 'function') {
    // First open the modal with the standard interface
    window.openAdminPackageModal(packageId, packageLimit, products);
    
    // Then set the existing quantities
    setTimeout(() => {
      Object.entries(productQuantities).forEach(([productId, quantity]) => {
        const quantityElement = document.getElementById(`quantity-${productId}`);
        const hiddenInput = document.getElementById(`hidden-${productId}`);
        if (quantityElement && hiddenInput) {
          quantityElement.textContent = quantity;
          hiddenInput.value = quantity;
        }
      });
      
      // Update the total and button states
      if (typeof window.updateTotalItems === 'function') {
        window.updateTotalItems();
      }
    }, 100);
  } else {
    // Fallback - just show an alert if the function isn't available
    alert('Package selection is not available. Please refresh the page.');
  }
}
</script>