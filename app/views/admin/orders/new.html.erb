<% content_for :title, "Create New Order" %>

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-orange-950">Create New Order</h1>
    <p class="mt-2 text-orange-600">Create a new order for a customer via phone or email.</p>
  </div>

  <% if flash[:alert] %>
    <div class="mb-6 bg-red-50 border border-red-200 rounded-md p-4">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800">Order Creation Failed</h3>
          <div class="mt-2 text-sm text-red-700">
            <p><%= flash[:alert] %></p>
          </div>
        </div>
      </div>
    </div>
  <% end %>

  <% if @order&.errors&.any? %>
    <div class="mb-6 bg-red-50 border border-red-200 rounded-md p-4">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800">Validation Errors</h3>
          <div class="mt-2 text-sm text-red-700">
            <ul class="list-disc pl-5 space-y-1">
              <% @order.errors.full_messages.each do |message| %>
                <li><%= message %></li>
              <% end %>
            </ul>
          </div>
        </div>
      </div>
    </div>
  <% end %>

  <%= form_with model: [:admin, @order], local: true, class: "space-y-8", data: { turbo: false } do |form| %>
    <!-- Order Source Selection -->
    <div class="bg-white shadow rounded-lg border border-orange-200 p-6">
      <h3 class="text-lg font-medium text-orange-950 mb-4">Order Source</h3>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="flex items-center">
          <%= form.radio_button :order_source, 'admin_phone', class: "form-radio" %>
          <%= form.label :order_source_admin_phone, "Phone Order", class: "ml-3 block text-sm font-medium text-orange-700" %>
        </div>
        <div class="flex items-center">
          <%= form.radio_button :order_source, 'admin_email', class: "form-radio" %>
          <%= form.label :order_source_admin_email, "Email Order", class: "ml-3 block text-sm font-medium text-orange-700" %>
        </div>
      </div>
    </div>

    <!-- Customer Information -->
    <div class="bg-white shadow rounded-lg border border-orange-200 p-6">
      <h3 class="text-lg font-medium text-orange-950 mb-4">Customer Information</h3>
      
      <!-- Customer Search/Link Section -->
      <div class="mb-6 p-4 bg-orange-50 rounded-lg">
        <h4 class="text-md font-medium text-orange-950 mb-3">Link to Existing Customer</h4>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="form-label">Customer Email</label>
            <input type="email" id="customer-email-search" placeholder="Enter customer email to search" 
                   class="form-input">
          </div>
          <div class="flex items-end">
            <button type="button" id="search-customer-btn" 
                    class="bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-md text-sm font-medium">
              Search Customer
            </button>
          </div>
        </div>
        <div id="customer-search-results" class="mt-3 hidden">
          <!-- Customer search results will be populated here -->
        </div>
      </div>

      <!-- Customer Details Form -->
      <div id="customer-details-form">
        <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
          <div class="sm:col-span-3">
            <%= form.label :customer_name, "Customer Name", class: "form-label" %>
            <div class="mt-1">
              <%= form.text_field :customer_name, class: "form-input" %>
              <% if @order&.errors[:customer_name]&.any? %>
                <p class="form-error"><%= @order.errors[:customer_name].first %></p>
              <% end %>
            </div>
          </div>

          <div class="sm:col-span-3">
            <%= form.label :email, "Email", class: "form-label" %>
            <div class="mt-1">
              <%= form.email_field :email, class: "form-input" %>
              <% if @order&.errors[:email]&.any? %>
                <p class="form-error"><%= @order.errors[:email].first %></p>
              <% end %>
            </div>
          </div>

          <div class="sm:col-span-3">
            <%= form.label :phone, "Phone", class: "form-label" %>
            <div class="mt-1">
              <%= form.telephone_field :phone, class: "form-input" %>
              <% if @order&.errors[:phone]&.any? %>
                <p class="form-error"><%= @order.errors[:phone].first %></p>
              <% end %>
            </div>
          </div>

          <div class="sm:col-span-6">
            <%= form.label :address, "Address", class: "form-label" %>
            <div class="mt-1">
              <%= form.text_area :address, rows: 3, class: "form-textarea" %>
              <% if @order&.errors[:address]&.any? %>
                <p class="form-error"><%= @order.errors[:address].first %></p>
              <% end %>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Order Items -->
    <div class="bg-white shadow rounded-lg border border-orange-200 p-6">
      <h3 class="text-lg font-medium text-orange-950 mb-6">Order Items</h3>
      
      <!-- Package Options -->
      <div class="mb-8">
        <h4 class="text-xl font-semibold text-orange-950 mb-4">Package Options</h4>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <% @crinkle_packages.each do |package| %>
            <div class="bg-white rounded-lg shadow-md overflow-hidden border border-orange-200 hover:border-orange-500 transition duration-150">
              <div class="p-6">
                <h5 class="text-lg font-semibold mb-2 text-orange-950"><%= package.name %></h5>
                <p class="text-orange-700 mb-4 text-sm"><%= package.description %></p>
                <div class="space-y-3">
                  <div class="text-center">
                    <span class="text-2xl font-bold text-orange-950">$<%= number_with_precision(package.price, precision: 2) %></span>
                  </div>
                  <button type="button" 
                          data-package-modal-package-id-param="<%= package.id %>"
                          data-package-modal-package-limit-param="<%= package.quantity %>"
                          data-package-modal-products-param='<%= raw Product.active.map { |p| { id: p.id, name: p.name, image_url: p.image&.attached? ? rails_blob_url(p.image) : nil } }.to_json %>'
                          class="package-select-btn w-full inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition-colors">
                    Select Package
                  </button>
                </div>
              </div>
            </div>
          <% end %>
        </div>
      </div>

      <!-- Individual Products -->
      <div class="mb-6">
        <h4 class="text-xl font-semibold text-orange-950 mb-4">Individual Products</h4>
        
        <!-- Crinkles Section -->
        <% crinkles = @products.crinkles %>
        <% if crinkles.any? %>
          <div class="mb-8">
            <h5 class="text-lg font-medium text-orange-950 mb-4">Crinkles</h5>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <% crinkles.each do |product| %>
                <div class="bg-white rounded-lg shadow-md overflow-hidden border border-orange-200 hover:border-orange-500 transition duration-150">
                  <div class="p-4 flex items-center space-x-4">
                    <div class="h-16 w-20 bg-orange-50 flex items-center justify-center overflow-hidden rounded-lg flex-shrink-0">
                      <% if product.has_image? %>
                        <%= image_tag product.image, class: "w-full h-full object-cover" %>
                      <% else %>
                        <%= image_tag product.fallback_image_path, class: "w-full h-full object-cover" %>
                      <% end %>
                    </div>
                    
                    <div class="flex-1 min-w-0">
                      <h6 class="text-lg font-semibold text-orange-950 truncate mb-2"><%= product.name %></h6>
                      <div class="flex justify-between items-center">
                        <span class="text-lg font-bold text-orange-950">$<%= number_with_precision(product.price, precision: 2) %></span>
                        <div class="flex items-center gap-2">
                          <label class="text-sm text-orange-700 whitespace-nowrap">Qty:</label>
                          <input type="number" min="0" value="0" 
                                 data-product-id="<%= product.id %>"
                                 data-product-price="<%= product.price %>"
                                 class="form-input w-16">
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              <% end %>
            </div>
          </div>
        <% end %>

        <!-- Extras Section -->
        <% extras = @products.extras %>
        <% if extras.any? %>
          <div class="mb-8">
            <h5 class="text-lg font-medium text-green-950 mb-4">Extras</h5>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <% extras.each do |product| %>
                <div class="bg-white rounded-lg shadow-md overflow-hidden border border-green-200 hover:border-green-500 transition duration-150">
                  <div class="p-4 flex items-center space-x-4">
                    <div class="h-16 w-20 bg-green-50 flex items-center justify-center overflow-hidden rounded-lg flex-shrink-0">
                      <% if product.has_image? %>
                        <%= image_tag product.image, class: "w-full h-full object-cover" %>
                      <% else %>
                        <%= image_tag product.fallback_image_path, class: "w-full h-full object-cover" %>
                      <% end %>
                    </div>
                    
                    <div class="flex-1 min-w-0">
                      <h6 class="text-lg font-semibold text-green-950 truncate mb-2"><%= product.name %></h6>
                      <div class="flex justify-between items-center">
                        <span class="text-lg font-bold text-green-950">$<%= number_with_precision(product.price, precision: 2) %></span>
                        <div class="flex items-center gap-2">
                          <label class="text-sm text-green-700 whitespace-nowrap">Qty:</label>
                          <input type="number" min="0" value="0" 
                                 data-product-id="<%= product.id %>"
                                 data-product-price="<%= product.price %>"
                                 class="form-input w-16">
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              <% end %>
            </div>
          </div>
        <% end %>

        <!-- Merch Section -->
        <% merch = @products.merch %>
        <% if merch.any? %>
          <div class="mb-8">
            <h5 class="text-lg font-medium text-blue-950 mb-4">Merchandise</h5>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <% merch.each do |product| %>
                <div class="bg-white rounded-lg shadow-md overflow-hidden border border-blue-200 hover:border-blue-500 transition duration-150">
                  <div class="p-4 flex items-center space-x-4">
                    <div class="h-16 w-20 bg-blue-50 flex items-center justify-center overflow-hidden rounded-lg flex-shrink-0">
                      <% if product.has_image? %>
                        <%= image_tag product.image, class: "w-full h-full object-cover" %>
                      <% else %>
                        <%= image_tag product.fallback_image_path, class: "w-full h-full object-cover" %>
                      <% end %>
                    </div>
                    
                    <div class="flex-1 min-w-0">
                      <h6 class="text-lg font-semibold text-blue-950 truncate mb-2"><%= product.name %></h6>
                      <div class="flex justify-between items-center">
                        <span class="text-lg font-bold text-blue-950">$<%= number_with_precision(product.price, precision: 2) %></span>
                        <div class="flex items-center gap-2">
                          <label class="text-sm text-blue-700 whitespace-nowrap">Qty:</label>
                          <input type="number" min="0" value="0" 
                                 data-product-id="<%= product.id %>"
                                 data-product-price="<%= product.price %>"
                                 class="form-input w-16">
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              <% end %>
            </div>
          </div>
        <% end %>
      </div>

      <!-- Order Summary -->
      <div class="border-t border-orange-200 pt-4">
        <!-- Selected Items Display -->
        <div id="selected-items-display" class="mb-6 hidden">
          <h5 class="text-lg font-medium text-orange-950 mb-3">Selected Items</h5>
          <div id="selected-items-list" class="space-y-2">
            <!-- Selected items will be displayed here -->
          </div>
        </div>
        
        <div class="flex justify-between items-center">
          <h4 class="text-xl font-semibold text-orange-950">Order Total</h4>
          <span id="order-total" class="text-3xl font-bold text-orange-950">$0.00</span>
        </div>
      </div>
    </div>

    <!-- Hidden Fields for Form Submission -->
    <div id="line-items-container">
      <!-- Line items will be added here dynamically -->
    </div>

    <!-- Action Buttons -->
    <div class="flex justify-end space-x-3">
      <%= link_to "Cancel", admin_orders_path, class: "bg-gray-300 hover:bg-gray-400 text-gray-800 px-4 py-2 rounded-md text-sm font-medium" %>
      <%= form.submit "Create Order", class: "bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-md text-sm font-medium" %>
    </div>
  <% end %>
</div>

<!-- Package Selection Modal -->
<div id="adminPackageModal" class="fixed inset-0 hidden z-50" aria-labelledby="modal-title" role="dialog" aria-modal="true">
  <!-- Backdrop -->
  <div class="fixed inset-0 backdrop-blur-sm"></div>
  
  <div class="fixed inset-0 z-10 overflow-y-auto">
    <div class="flex min-h-full items-center justify-center p-4">
      <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all w-full max-w-md sm:p-6">
        <div class="absolute right-0 top-0 hidden pr-4 pt-4 sm:block">
          <button type="button" onclick="closeAdminPackageModal()" class="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2">
            <span class="sr-only">Close</span>
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <div class="sm:flex sm:items-start">
          <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
            <h3 class="text-xl font-semibold leading-6 text-orange-950" id="modal-title">Select Package Items</h3>
            <input type="hidden" id="packageId">
          </div>
        </div>

        <div id="productSelectionContainer" class="mt-6 space-y-3">
          <!-- Product selection fields will be dynamically added here -->
        </div>

        <div class="mt-6 flex items-center justify-between">
          <div class="text-sm text-orange-700">
            <span>Total: </span>
            <span id="totalItems">0</span>
            <span>/</span>
            <span id="packageLimit">0</span>
          </div>
          <div class="flex space-x-3">
            <button type="button" onclick="closeAdminPackageModal()" class="inline-flex justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-orange-700 shadow-sm ring-1 ring-inset ring-orange-300 hover:bg-orange-50">
              Cancel
            </button>
            <button type="button" onclick="addPackageToOrder()" 
                    class="inline-flex justify-center rounded-md bg-orange-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-orange-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-orange-600"
                    id="submitButton">
              Add to Order
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
// Global variables
window.selectedPackages = [];

// Global functions that need to be accessible from the modal
window.updateOrderTotal = function() {
  let orderTotal = 0;
  
  // Calculate products total
  document.querySelectorAll('.product-quantity').forEach(input => {
    const quantity = parseInt(input.value) || 0;
    const price = parseFloat(input.dataset.productPrice);
    orderTotal += quantity * price;
  });
  
  // Calculate packages total
  window.selectedPackages.forEach(package => {
    orderTotal += package.price * package.quantity;
  });
  
  document.getElementById('order-total').textContent = '$' + orderTotal.toFixed(2);
  updateSelectedItemsDisplay();
};

// Update selected items display
window.updateSelectedItemsDisplay = function() {
  const displayDiv = document.getElementById('selected-items-display');
  const listDiv = document.getElementById('selected-items-list');
  const hasItems = window.selectedPackages.length > 0 || Array.from(document.querySelectorAll('.product-quantity')).some(input => (parseInt(input.value) || 0) > 0);
  
  if (hasItems) {
    displayDiv.classList.remove('hidden');
    listDiv.innerHTML = '';
    
    // Add selected packages
    window.selectedPackages.forEach((package, index) => {
      const packageDiv = document.createElement('div');
      packageDiv.className = 'bg-orange-50 p-4 rounded-lg mb-3';
      
      // Package header
      const packageHeader = document.createElement('div');
      packageHeader.className = 'flex justify-between items-center mb-3';
      packageHeader.innerHTML = `
        <div>
          <span class="font-semibold text-orange-950">${package.name}</span>
          <span class="text-sm text-orange-600 ml-2">(Package)</span>
        </div>
        <div class="flex items-center space-x-2">
          <span class="text-lg font-bold text-orange-950">$${package.price.toFixed(2)}</span>
          <button type="button" onclick="removePackage(${index})" class="text-red-600 hover:text-red-800 ml-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      `;
      packageDiv.appendChild(packageHeader);
      
      // Package products
      if (package.product_quantities && Object.keys(package.product_quantities).length > 0) {
        const productsDiv = document.createElement('div');
        productsDiv.className = 'ml-4 space-y-2';
        
        // Get all products to find their names
        const allProducts = Array.from(document.querySelectorAll('.product-quantity')).map(input => ({
          id: input.dataset.productId,
          name: input.closest('.bg-white').querySelector('h5').textContent.trim()
        }));
        
        Object.entries(package.product_quantities).forEach(([productId, quantity]) => {
          if (quantity > 0) {
            const product = allProducts.find(p => p.id === productId);
            const productName = product ? product.name : `Product ${productId}`;
            
            const productDiv = document.createElement('div');
            productDiv.className = 'flex justify-between items-center text-sm';
            productDiv.innerHTML = `
              <span class="text-orange-700">• ${productName}</span>
              <span class="text-orange-600 font-medium">Qty: ${quantity}</span>
            `;
            productsDiv.appendChild(productDiv);
          }
        });
        
        packageDiv.appendChild(productsDiv);
      }
      
      listDiv.appendChild(packageDiv);
    });
    
    // Add selected individual products
    document.querySelectorAll('.product-quantity').forEach(input => {
      const quantity = parseInt(input.value) || 0;
      if (quantity > 0) {
        const productCard = input.closest('.bg-white');
        const productName = productCard.querySelector('h5').textContent;
        const productPrice = parseFloat(input.dataset.productPrice);
        
        const itemDiv = document.createElement('div');
        itemDiv.className = 'flex justify-between items-center bg-orange-50 p-3 rounded-lg mb-2';
        itemDiv.innerHTML = `
          <div>
            <span class="font-medium text-orange-950">${productName}</span>
            <span class="text-sm text-orange-600 ml-2">(Individual Product)</span>
          </div>
          <div class="flex items-center space-x-2">
            <span class="text-orange-950">Qty: ${quantity}</span>
            <span class="text-orange-950 font-bold">$${(productPrice * quantity).toFixed(2)}</span>
          </div>
        `;
        listDiv.appendChild(itemDiv);
      }
    });
  } else {
    displayDiv.classList.add('hidden');
  }
};

window.addPackageToOrder = function() {
  const container = document.getElementById('productSelectionContainer');
  if (!container) {
    console.error('productSelectionContainer not found');
    return;
  }
  
  // Get all hidden inputs that contain product quantities
  const inputs = container.querySelectorAll('input[type="hidden"][name^="product_quantities["]');
  const productQuantities = {};
  let totalQuantity = 0;
  
  inputs.forEach(input => {
    const quantity = parseInt(input.value) || 0;
    if (quantity > 0) {
      const productId = input.name.match(/\[(\d+)\]/)[1];
      productQuantities[productId] = quantity;
      totalQuantity += quantity;
    }
  });
  
  if (totalQuantity > 0) {
    // Get the current package ID from the hidden field
    const packageIdElement = document.getElementById('packageId');
    const currentPackageId = packageIdElement ? packageIdElement.value : null;
    
    // Find package details using the current package ID
    const packageButton = document.querySelector(`[data-package-modal-package-id-param="${currentPackageId}"]`);
    if (packageButton) {
      const packageCard = packageButton.closest('.bg-white');
      const packageName = packageCard.querySelector('h5').textContent.trim();
      const priceElement = packageCard.querySelector('.text-2xl.font-bold');
      const packagePrice = parseFloat(priceElement.textContent.replace('$', '').trim());
      
      // Add to selected packages
      window.selectedPackages.push({
        id: currentPackageId,
        name: packageName,
        price: packagePrice,
        quantity: 1,
        product_quantities: productQuantities
      });
      
      // Close modal and update order total
      if (typeof closeAdminPackageModal === 'function') {
        closeAdminPackageModal();
      }
      
      if (typeof window.updateOrderTotal === 'function') {
        window.updateOrderTotal();
      }
    } else {
      console.error('Could not find package button for ID:', currentPackageId);
    }
  } else {
    alert('Please select at least one item for the package.');
  }
};

window.closePackageModal = function() {
  if (typeof closeAdminPackageModal === 'function') {
    closeAdminPackageModal();
  }
};

window.removePackage = function(index) {
  window.selectedPackages.splice(index, 1);
  if (typeof window.updateOrderTotal === 'function') {
    window.updateOrderTotal();
  }
};

document.addEventListener('DOMContentLoaded', function() {
  // Add event listeners for quantity changes
  document.querySelectorAll('.product-quantity').forEach(input => {
    input.addEventListener('change', window.updateOrderTotal);
  });
  
  // Function to update package total
  window.updatePackageTotal = function() {
    const inputs = document.querySelectorAll('.package-product-quantity');
    let total = 0;
    inputs.forEach(input => {
      total += parseInt(input.value) || 0;
    });
    document.getElementById('totalItems').textContent = total;
  };
  
  // Function to close admin package modal
  window.closeAdminPackageModal = function() {
    document.getElementById('adminPackageModal').classList.add('hidden');
  };
  
  // Customer search functionality
  document.getElementById('search-customer-btn').addEventListener('click', function() {
    const email = document.getElementById('customer-email-search').value;
    if (!email) return;
    
    fetch(`/admin/users/search?email=${encodeURIComponent(email)}`)
      .then(response => response.json())
      .then(data => {
        const resultsDiv = document.getElementById('customer-search-results');
        resultsDiv.innerHTML = '';
        
        if (data.customer) {
          resultsDiv.innerHTML = `
            <div class="bg-green-50 border border-green-200 rounded-lg p-3">
              <p class="text-sm text-green-800">
                <strong>Found customer:</strong> ${data.customer.full_name} (${data.customer.email})
              </p>
              <button type="button" class="mt-2 text-sm text-green-600 hover:text-green-800" 
                      onclick="fillCustomerDetails('${data.customer.email}', '${data.customer.full_name}', '${data.customer.phone}', '${data.customer.address}')">
                Use this customer
              </button>
            </div>
          `;
        } else {
          resultsDiv.innerHTML = `
            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
              <p class="text-sm text-yellow-800">No customer found with this email. You can create a new customer below.</p>
            </div>
          `;
        }
        
        resultsDiv.classList.remove('hidden');
      })
      .catch(error => {
        console.error('Error searching for customer:', error);
      });
  });
  
  // Fill customer details
  window.fillCustomerDetails = function(email, name, phone, address) {
    document.querySelector('input[name="order[email]"]').value = email;
    document.querySelector('input[name="order[customer_name]"]').value = name;
    document.querySelector('input[name="order[phone]"]').value = phone;
    document.querySelector('textarea[name="order[address]"]').value = address;
  };
  
  // Form submission - add line items
  const form = document.querySelector('form[action*="admin/orders"]');
  
  if (form) {
    form.addEventListener('submit', function(e) {
      // Prevent default submission first
      e.preventDefault();
      
      const lineItemsContainer = document.getElementById('line-items-container');
      
      // Clear existing line items
      lineItemsContainer.innerHTML = '';
      
      let lineItemCount = 0;
      
      // Add product line items
      const productInputs = document.querySelectorAll('.product-quantity');
      
      productInputs.forEach((input, index) => {
        const quantity = parseInt(input.value) || 0;
        
        if (quantity > 0) {
          const productId = input.dataset.productId;
          
          const hiddenInput = document.createElement('input');
          hiddenInput.type = 'hidden';
          hiddenInput.name = 'line_items[][product_id]';
          hiddenInput.value = productId;
          lineItemsContainer.appendChild(hiddenInput);
          
          const quantityInput = document.createElement('input');
          quantityInput.type = 'hidden';
          quantityInput.name = 'line_items[][quantity]';
          quantityInput.value = quantity;
          lineItemsContainer.appendChild(quantityInput);
          
          lineItemCount++;
        }
      });
      
      // Add package line items
      window.selectedPackages.forEach((package, index) => {
        const packageIdInput = document.createElement('input');
        packageIdInput.type = 'hidden';
        packageIdInput.name = 'line_items[][package_id]';
        packageIdInput.value = package.id;
        lineItemsContainer.appendChild(packageIdInput);
        
        const quantityInput = document.createElement('input');
        quantityInput.type = 'hidden';
        quantityInput.name = 'line_items[][quantity]';
        quantityInput.value = package.quantity;
        lineItemsContainer.appendChild(quantityInput);
        
        const productQuantitiesInput = document.createElement('input');
        productQuantitiesInput.type = 'hidden';
        productQuantitiesInput.name = 'line_items[][product_quantities]';
        productQuantitiesInput.value = JSON.stringify(package.product_quantities);
        lineItemsContainer.appendChild(productQuantitiesInput);
        
        lineItemCount++;
      });
      
      // Check if we have any items
      if (lineItemCount === 0) {
        alert('Please add at least one item to the order before submitting.');
        return;
      }
      
      // Submit the form
      this.submit();
    });
  } else {
    console.error('Admin orders form not found!');
  }
  
  // Initialize order total
  window.updateOrderTotal();
});
</script> 