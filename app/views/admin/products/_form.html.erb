<%= form_with(model: [:admin, product], class: "space-y-8") do |f| %>
  <% if product.errors.any? %>
    <div class="rounded-md bg-red-50 p-4">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800">
            <%= pluralize(product.errors.count, "error") %> prohibited this product from being saved:
          </h3>
          <div class="mt-2 text-sm text-red-700">
            <ul class="list-disc pl-5 space-y-1">
              <% product.errors.full_messages.each do |message| %>
                <li><%= message %></li>
              <% end %>
            </ul>
          </div>
        </div>
      </div>
    </div>
  <% end %>

  <!-- Basic Information Section -->
  <div class="bg-white border border-orange-200 rounded-lg p-6">
    <h3 class="text-lg font-semibold text-orange-950 mb-4 border-b border-orange-100 pb-2">
      Basic Information
    </h3>
    
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <div class="lg:col-span-2">
        <%= f.label :name, "Product Name", class: "form-label" %>
        <%= f.text_field :name, class: "form-input", placeholder: "Enter the product name" %>
      </div>
      
      <div>
        <%= f.label :category, "Category", class: "form-label" %>
        <%= f.select :category, 
            options_for_select(Product.available_categories.map { |cat| [cat, cat] }, product.category), 
            { prompt: "Choose a category..." }, 
            { class: "form-select" } %>
      </div>
      
      <div>
        <%= f.label :price, "Price ($)", class: "form-label" %>
        <div class="mt-1 relative rounded-md shadow-sm">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <span class="text-orange-500 text-sm font-medium">$</span>
          </div>
          <%= f.number_field :price, step: 0.01, min: 0, class: "form-input pl-7 pr-12", placeholder: "0.00" %>
        </div>
      </div>
    </div>
  </div>

  <!-- Descriptions Section -->
  <div class="bg-white border border-orange-200 rounded-lg p-6">
    <h3 class="text-lg font-semibold text-orange-950 mb-4 border-b border-orange-100 pb-2">
      Descriptions
    </h3>
    
    <div class="space-y-4">
      <div>
        <%= f.label :short_description, "Short Description", class: "form-label" %>
        <p class="text-xs text-orange-600 mb-2">Brief summary that appears in product listings (optional)</p>
        <%= f.text_area :short_description, rows: 2, class: "form-textarea", placeholder: "A brief, catchy description..." %>
      </div>
      
      <div>
        <%= f.label :description, "Full Description", class: "form-label" %>
        <p class="text-xs text-orange-600 mb-2">Detailed description shown on the product page</p>
        <%= f.text_area :description, rows: 4, class: "form-textarea", placeholder: "Tell customers about this product..." %>
      </div>
    </div>
  </div>

  <!-- Ingredients & Allergen Information Section -->
  <div class="bg-white border border-orange-200 rounded-lg p-6">
    <h3 class="text-lg font-semibold text-orange-950 mb-4 border-b border-orange-100 pb-2">
      Ingredients & Allergen Information
    </h3>
    
    <div class="space-y-4">
      <div>
        <%= f.label :ingredients, "Ingredients", class: "form-label" %>
        <p class="text-xs text-orange-600 mb-2">List all ingredients used in this product (optional)</p>
        <%= f.text_area :ingredients, rows: 3, class: "form-textarea", placeholder: "All-purpose flour, dark cocoa powder, baking powder, salt..." %>
      </div>
      
      <div>
        <%= f.label :allergen_info, "Allergen Information", class: "form-label" %>
        <p class="text-xs text-orange-600 mb-2">Allergen warnings and dietary information (optional)</p>
        <%= f.text_area :allergen_info, rows: 4, class: "form-textarea", placeholder: "Contains Eggs
Contains Gluten (Wheat)
Contains Soy (from chocolate)
Dairy-free recipe (chocolate may contain traces)
May contain traces of milk, nuts due to shared equipment..." %>
      </div>
      
      <div>
        <%= f.label :storage_instructions, "Storage Instructions", class: "form-label" %>
        <p class="text-xs text-orange-600 mb-2">Storage and freshness information (optional)</p>
        <%= f.text_area :storage_instructions, rows: 3, class: "form-textarea", placeholder: "Keep in a cool, dry place.
Best consumed within 5 days of purchase.
Can be frozen up to 1 month â€” thaw at room temperature." %>
      </div>
    </div>
  </div>

  <!-- Images Section -->
  <!-- 
    To configure different image limits for different models:
    - Products: data-max-images="3"
    - Packages: data-max-images="5" 
    - Users: data-max-images="1"
    Simply change the data-max-images attribute value
  -->
  <div class="bg-white border border-orange-200 rounded-lg p-6">
    <div id="imageManagerContainer" 
         data-existing-images='<%= raw(
           if product.all_images_with_primary_status.any?
             product.all_images_with_primary_status.map { |img_data| 
               {
                 image: {
                   id: img_data[:image].id,
                   blob_id: img_data[:image].blob.id,
                   url: url_for(img_data[:image])
                 },
                 is_primary: img_data[:is_primary]
               }
             }.to_json
           else
             "[]"
           end
         ) %>'
         data-primary-image-id="<%= product.primary_image_id %>"
         data-max-images="3">
      <!-- Image manager will be rendered here by JavaScript -->
    </div>
    
    <!-- Hidden file input for form submission -->
    <%= f.file_field :images, multiple: true, accept: "image/*", 
        style: "display: none;", id: "hiddenImageInput" %>
  </div>

  <!-- Status Section -->
  <div class="bg-white border border-orange-200 rounded-lg p-6">
    <h3 class="text-lg font-semibold text-orange-950 mb-4 border-b border-orange-100 pb-2">
      Product Status
    </h3>
    
    <div class="admin-status-section">
      <div class="admin-status-info">
        <h4 class="admin-status-title">Product Availability</h4>
        <p class="admin-status-description">
          Control whether customers can see and purchase this product
        </p>
        <div class="mt-2 space-y-1">
          <div class="flex items-center text-xs text-orange-600">
            <span class="inline-block w-2 h-2 bg-green-500 rounded-full mr-2"></span>
            <span><strong>Active:</strong> Visible to customers, available for purchase</span>
          </div>
          <div class="flex items-center text-xs text-orange-600">
            <span class="inline-block w-2 h-2 bg-gray-400 rounded-full mr-2"></span>
            <span><strong>Inactive:</strong> Hidden from customers, draft mode</span>
          </div>
        </div>
      </div>
      
      <div class="admin-status-toggle">
        <label class="admin-toggle-switch">
          <%= f.check_box :active, class: "admin-toggle-input", checked: product.new_record? ? true : product.active? %>
          <span class="admin-toggle-slider"></span>
          <span class="admin-toggle-labels">
            <span class="admin-toggle-active">Active</span>
            <span class="admin-toggle-inactive">Inactive</span>
          </span>
        </label>
      </div>
    </div>
  </div>

  <!-- Action Buttons -->
  <div class="flex justify-end space-x-3 pt-6 border-t border-orange-200">
    <%= link_to "Cancel", admin_products_path, class: "admin-btn-secondary" %>
    <%= f.submit class: "admin-btn-primary" %>
  </div>
<% end %>

<script>
// Simple form submission test
document.addEventListener('DOMContentLoaded', function() {
  const form = document.querySelector('form');
  if (form) {
    console.log('Form found:', {
      action: form.action,
      method: form.method,
      enctype: form.enctype
    });
    
    // Test form submission
    form.addEventListener('submit', function(e) {
      console.log('=== FORM SUBMISSION TEST ===');
      console.log('Form action:', form.action);
      console.log('Form method:', form.method);
      
      // Log all form fields
      const formData = new FormData(form);
      console.log('Form data:');
      for (let [key, value] of formData.entries()) {
        console.log(`${key}:`, value);
      }
      
      // Check if required fields are present
      const nameField = form.querySelector('input[name="product[name]"]');
      const categoryField = form.querySelector('select[name="product[category]"]');
      const priceField = form.querySelector('input[name="product[price]"]');
      const activeField = form.querySelector('input[name="product[active]"]');
      
      console.log('Required fields:');
      console.log('Name:', nameField ? nameField.value : 'NOT FOUND');
      console.log('Category:', categoryField ? categoryField.value : 'NOT FOUND');
      console.log('Price:', priceField ? priceField.value : 'NOT FOUND');
      console.log('Active:', activeField ? activeField.value : 'NOT FOUND');
      
      console.log('=== END FORM SUBMISSION TEST ===');
    });
  } else {
    console.error('No form found on page');
  }
});

function initializeImageManager() {
  try {
    const container = document.getElementById('imageManagerContainer');
    if (!container) {
      console.log('Image manager container not found');
      return;
    }
    
    const existingImagesData = container.dataset.existingImages;
    const primaryImageId = container.dataset.primaryImageId;
    const maxImages = parseInt(container.dataset.maxImages) || 3;
    
    console.log('Initializing with data:', {
      existingImagesData,
      primaryImageId,
      maxImages
    });
    
    // Parse existing images data
    let existingImages = [];
    if (existingImagesData && existingImagesData !== 'null' && existingImagesData !== '[]') {
      try {
        const parsedData = JSON.parse(existingImagesData);
        console.log('Parsed data:', parsedData);
        
        if (Array.isArray(parsedData)) {
          existingImages = parsedData.map(img => {
            console.log('Processing image:', img);
            
            // Handle both direct image objects and nested image objects
            const imageData = img.image || img;
            
            return {
              id: imageData.id,
              url: imageData.url,
              isNew: false
            };
          }).filter(img => img.id && img.url); // Filter out invalid entries
        }
      } catch (e) {
        console.error('Error parsing existing images:', e);
        console.error('Raw data:', existingImagesData);
      }
    }
    
    console.log('Final existing images:', existingImages);
    
    // Initialize the image manager
    window.imageManager = new ImageManager(container, {
      maxImages: maxImages,
      allowPrimary: true,
      fieldName: 'product[images]',
      primaryFieldName: 'primary_image_id'
    });
    
    // Set existing images
    window.imageManager.currentImages = existingImages;
    if (primaryImageId && primaryImageId !== 'null' && primaryImageId !== '') {
      window.imageManager.primaryImageId = primaryImageId;
    }
    
    // Re-render with existing data
    window.imageManager.renderImages();
    window.imageManager.updateUploadVisibility();
    
    // Handle form submission
    const form = container.closest('form');
    if (form) {
      form.addEventListener('submit', function(e) {
        try {
          console.log('=== FORM SUBMISSION START ===');
          console.log('Form action:', form.action);
          console.log('Form method:', form.method);
          console.log('Form data before processing:');
          
          // Log all form data
          const formData = new FormData(form);
          for (let [key, value] of formData.entries()) {
            console.log(`${key}:`, value);
          }
          
          console.log('Image manager state:', {
            currentImages: window.imageManager.currentImages.length,
            newFiles: window.imageManager.newFiles.length,
            totalImages: window.imageManager.currentImages.length + window.imageManager.newFiles.length,
            primaryImageId: window.imageManager.primaryImageId
          });
          
          // Update hidden fields before submission
          window.imageManager.updateHiddenFields();
          
          // Handle new file uploads
          const hiddenInput = document.getElementById('hiddenImageInput');
          if (hiddenInput && window.imageManager.newFiles.length > 0) {
            console.log('Transferring files to hidden input:', window.imageManager.newFiles.length);
            
            const fileTransfer = new DataTransfer();
            
            window.imageManager.newFiles.forEach((fileObj, index) => {
              console.log(`Adding file ${index + 1}:`, fileObj.file.name);
              fileTransfer.items.add(fileObj.file);
            });
            
            hiddenInput.files = fileTransfer.files;
            console.log('Hidden input now has files:', hiddenInput.files.length);
            
            // Verify the files are there
            for (let i = 0; i < hiddenInput.files.length; i++) {
              console.log(`Hidden input file ${i + 1}:`, hiddenInput.files[i].name);
            }
          } else {
            console.log('No new files to transfer or hidden input not found');
            // Clear the hidden input if no new files to prevent Rails from processing empty file array
            if (hiddenInput) {
              hiddenInput.value = '';
              console.log('Cleared hidden input');
            }
          }
          
          console.log('Form data after processing:');
          const finalFormData = new FormData(form);
          for (let [key, value] of finalFormData.entries()) {
            console.log(`${key}:`, value);
          }
          
          console.log('=== FORM SUBMISSION END ===');
          
          // Don't prevent default - let the form submit normally
          // e.preventDefault();
        } catch (error) {
          console.error('Error during form submission:', error);
          // Don't prevent default - let the form submit even if there's an error
        }
      });
    }
  } catch (error) {
    console.error('Error initializing image manager:', error);
  }
}

// Initialize on page load and Turbo navigation
document.addEventListener('DOMContentLoaded', initializeImageManager);
document.addEventListener('turbo:load', initializeImageManager);
document.addEventListener('turbo:render', initializeImageManager);
</script> 